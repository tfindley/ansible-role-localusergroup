---
# tasks file for users

- name: "LocalUserGroup - Fetch local user accounts"
  become: true
  ansible.builtin.getent:
    database: group

- name: "LocalUserGroup - Fetch local user accounts"
  become: true
  ansible.builtin.getent:
    database: passwd

- name: "LocalUserGroup - Manage groups"
  become: true
  ignore_errors: "{{ true if item.state == 'absent' else false }}"   # because idempotency is difficult with this module
  loop: "{{ localusergroup_groups }}"
  loop_control:
    label: "{{ item.name }} - {{ item.state }}"
  when:
    - localusergroup_groups is defined
  ansible.builtin.group:
    name: "{{ item.name }}"
    state: "{{ item.state }}"

- name: "LocalUserGroup - Manage users"
  become: true
  ignore_errors: "{{ true if item.state == 'absent' else false }}"   # because idempotency is difficult with this module
  loop: "{{ localusergroup_users }}"
  loop_control:
    label: "{{ item.username }} - {{ item.state }}"
  when:
    - localusergroup_users
  ansible.builtin.user:
    name: "{{ item.username }}"
    password: "{{ item.password if item.state == 'present' else omit }}"
    shell: "{{ item.shell | default('/bin/bash') if item.state == 'present' else omit }}"
    groups: "{{ (item.groups | default([])) + (localusergroup_sudo_group if item.sudo else []) if item.state == 'present' else omit }}"
    append: "{{ true if item.state == 'present' else omit }}"
    state: "{{ item.state }}"
    update_password: "{{ 'on_create' if item.state == 'present' else omit }}"

- name: "LocalUserGroup - Manage authorized keys"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  loop: "{{ localusergroup_users | selectattr('sshkeys', 'defined') | subelements('sshkeys') }}"
  loop_control:
    label: "{{ item.0.username }}"
  when:
    - item.0.state == "present"
    - item.1 is defined
    - item.1 | length > 0
  ansible.posix.authorized_key:
    user: "{{ item.0.username }}"
    state: present
    key: "{{ item.1 }}"
